#!/usr/bin/env python3
"""Test prawdziwego zapytania z ADK - Unicode + d≈Çugie zapytania"""

import sys
import os
sys.path.append('.')

import asyncio
from application.services.di_service import DIService

async def test_real_adk_query():
    print('Testing Real ADK Query with Unicode and Long Text...')
    print('=' * 70)
    
    # Initialize DI Service
    di_service = DIService()
    knowledge_service = di_service.get_knowledge_service()
    
    # Test 1: Twoje operatory (kt√≥re wcze≈õniej nie dzia≈Ça≈Çy)
    print('Test 1: Twoje operatory Unicode...')
    operators_query = """‚®Å       # Operator sumy idiomatycznej (≈ÇƒÖczenie idiom√≥w)
Œ¶       # Wektor znaczeniowy (meaning vector)
Œ®       # ≈ölad idiomu (idiom trace)
Œû       # Baza semantyczna (semantic basis)
Œ£       # Projekcja intencji (intent projection)
Œò       # Operator metryczny (np. iloczyn skalarny znacze≈Ñ)
Œ©       # Przestrze≈Ñ funkcyjna idiomu (np. kontekst, intencja, emocja)
‚áå       # PowiƒÖzanie dwustronne (korespondencja semantyczna)
‚Üí       # Transformacja lub kierunek (np. rzut na bazƒô)
‚ä•       # Rzut prostopad≈Çy (projekcja ortogonalna)
‚â°       # Definicja to≈ºsama (oznaczenie r√≥wnowa≈ºno≈õci pojƒôƒá)
‚ü®a | b‚ü© # Iloczyn skalarny (metryka podobie≈Ñstwa semantycznego)
‚àá       # Gradient znaczeniowy (zmiana w kierunku znaczenia)
Œª       # Warunek aktywacyjny (np. trigger idiomu)
‚àÉ       # Istnieje (kwantyfikator egzystencjalny)
‚àÄ       # Dla ka≈ºdego (kwantyfikator og√≥lny)
‚àà       # Nale≈ºy do (przynale≈ºno≈õƒá do zbioru pojƒôƒá)
‚àâ       # Nie nale≈ºy do (wykluczenie semantyczne)
‚äó       # Iloczyn tensorowy (≈ÇƒÖczenie dw√≥ch stan√≥w)
‚äô       # Iloczyn punktowy (transformacja lokalna)
‚®Ç       # Z≈Ço≈ºenie wektor√≥w w nowƒÖ jako≈õƒá idiomu"""
    
    print(f'Query length: {len(operators_query)} characters')
    result1 = await knowledge_service.search_knowledge_base(operators_query)
    
    if result1.is_success:
        print(f'SUCCESS! Found {len(result1.value)} results')
        for i, result in enumerate(result1.value[:3]):
            print(f'  {i+1}. Score: {result["score"]:.4f}')
            print(f'     Facts: {result["facts"][0][:100]}...')
    else:
        print(f'ERROR: {result1.error}')
    
    # Test 2: D≈Çugie zapytanie (blisko limitu 2000)
    print('\nTest 2: Long query near 2000 char limit...')
    long_query = """
    Analiza semantyczna idiom√≥w matematycznych w kontek≈õcie sztucznej inteligencji.
    Badanie wzorc√≥w jƒôzykowych i ich reprezentacji wektorowych w przestrzeni Hilberta.
    Implementacja algorytm√≥w machine learning dla rozpoznawania idiom√≥w osobowo≈õciowych.
    Integracja z bazami danych wektorowych Qdrant dla efektywnego wyszukiwania semantycznego.
    Optymalizacja embedding√≥w dla lepszego zrozumienia kontekstu i intencji u≈ºytkownika.
    Rozw√≥j system√≥w RAG (Retrieval-Augmented Generation) dla zaawansowanych chatbot√≥w.
    Implementacja wzorc√≥w ROP (Railway Oriented Programming) dla niezawodno≈õci systemu.
    Architektura mikroserwis√≥w z Dependency Injection dla skalowalno≈õci aplikacji.
    Testowanie wydajno≈õci i niezawodno≈õci system√≥w AI w ≈õrodowisku produkcyjnym.
    Monitoring i observability dla system√≥w sztucznej inteligencji.
    Bezpiecze≈Ñstwo danych i prywatno≈õƒá w systemach AI.
    Etyka sztucznej inteligencji i odpowiedzialne AI.
    """ * 3  # Powt√≥rz 3 razy ≈ºeby zbli≈ºyƒá siƒô do limitu
    
    print(f'Query length: {len(long_query)} characters')
    result2 = await knowledge_service.search_knowledge_base(long_query)
    
    if result2.is_success:
        print(f'SUCCESS! Found {len(result2.value)} results')
        for i, result in enumerate(result2.value[:2]):
            print(f'  {i+1}. Score: {result["score"]:.4f}')
            print(f'     Facts: {result["facts"][0][:80]}...')
    else:
        print(f'ERROR: {result2.error}')
    
    # Test 3: Zapytanie przekraczajƒÖce limit
    print('\nTest 3: Query exceeding 2000 char limit...')
    too_long_query = "A" * 2500
    print(f'Query length: {len(too_long_query)} characters')
    result3 = await knowledge_service.search_knowledge_base(too_long_query)
    
    if result3.is_error:
        print(f'CORRECTLY REJECTED: {result3.error}')
    else:
        print(f'UNEXPECTED: Should have been rejected!')
    
    # Test 4: Mieszane zapytanie (Unicode + d≈Çugi tekst)
    print('\nTest 4: Mixed Unicode + Long Text...')
    mixed_query = """
    üîç Analiza semantyczna idiom√≥w matematycznych ‚®Å Œ¶ Œ® Œû Œ£ Œò Œ©
    Implementacja system√≥w AI z wykorzystaniem wzorc√≥w ROP
    Integracja z bazami wektorowymi Qdrant dla efektywnego wyszukiwania
    Optymalizacja embedding√≥w dla lepszego zrozumienia kontekstu
    Rozw√≥j system√≥w RAG (Retrieval-Augmented Generation)
    Architektura mikroserwis√≥w z Dependency Injection
    Testowanie wydajno≈õci i niezawodno≈õci system√≥w AI
    Monitoring i observability dla system√≥w sztucznej inteligencji
    Bezpiecze≈Ñstwo danych i prywatno≈õƒá w systemach AI
    Etyka sztucznej inteligencji i odpowiedzialne AI
    """ * 2
    
    print(f'Query length: {len(mixed_query)} characters')
    result4 = await knowledge_service.search_knowledge_base(mixed_query)
    
    if result4.is_success:
        print(f'SUCCESS! Found {len(result4.value)} results')
        for i, result in enumerate(result4.value[:2]):
            print(f'  {i+1}. Score: {result["score"]:.4f}')
            print(f'     Facts: {result["facts"][0][:80]}...')
    else:
        print(f'ERROR: {result4.error}')
    
    print('\nReal ADK Query Test Completed!')
    print('=' * 70)

if __name__ == "__main__":
    asyncio.run(test_real_adk_query())
